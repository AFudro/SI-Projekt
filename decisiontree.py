from sklearn import tree

def predictTypeOfTrash(tab):
    properties=[[0,0,0.8,0.1,0,0.3,0.8,0,0.9,0.5],[0,0,0.8,0.1,0,0.3,0.9,0,0.9,0.5],[0,0,0.7,0.1,0,0.2,0.8,0,0.9,0.4],[0,0,0.9,0.1,0,0.1,0.9,0,0.9,0.4],[0,0,1,0.1,0,0.2,0.9,0,0.9,0.2],
       [0,0,0.8,0.1,0,0.1,1,0,0.9,0.3],[0.3,0,0.8,0,0,0,1,0,0.8,0.2],[0.2,0,1,0,0,0,0.9,0,0.8,0.6],[0.1,0,0.7,0,0,0.1,0.9,0,0.8,0.6],[0.2,0,0.9,0,0,0.1,0.9,0,0.8,0.6],
       [1,0.8,0.1,0.1,0,0.1,0.5,0,0,0.3],[1,0.7,0.1,0.1,0,0.2,0.6,0,0,0.2],[1,0.9,0.1,0.1,0,0,0.5,0,0.8,0.1],[1,1,0.1,0.1,0,0.1,0.4,0,0.1,0.3],[1,0.8,0.1,0.1,0,0.2,0.7,0,0,0.2],
       [0.8,1,0,0,0,0.2,0.7,0,0,0.4],[0.9,1,0.1,0,0,0,0.5,0,0.1,0.1],[0.8,1,0.1,0,0,0.1,0.5,0,0.1,0.2],[0.5,0.9,0.1,0,0,0,0.6,0,0.1,0.3],[1,0.7,0.1,0,0,0,0.5,0,0.8,0.1],
       [0,0,0.1,0.1,1,0.2,0,1,0,0.1],[0.2,0,0.1,0.1,1,0.2,0.2,1,0,0.1],[0,0,0.2,0,0.9,0.1,0,1,0.1,0.2],[0.2,0,0.1,0,1,0.2,0.2,1,0,0.1],[0.1,0,0.2,0,0.9,0.3,0.1,1,0.1,0.2],
       [0,0,0.2,0,0.9,0,0,1,0.1,0.2],[0.3,0,0.1,0.1,1,0,0.3,1,0,0.1],[0.2,0,0.2,0,0.9,0.1,0.2,1,0.1,0.2],[0,0,0.1,0.1,1,0.2,0,1,0,0.1],[0.4,0,0.2,0,0.9,0.3,0.3,1,0.1,0.2],
       [0.6,0.1,0,0.9,0,1,0,0,0,0.2],[0.5,0,0.3,1,0,0.9,0.1,0.1,0,0.3],[0.7,0,0.4,0.8,0,1,0.1,0,0,0.6],[0.6,0.1,0.3,0.9,0,0.9,0,0.1,0,0.3],[0.5,0,0,1,0,1,0.2,0,0,0.2],
       [0.8,0,0.2,0.9,0,0.8,0.2,0.1,0,0.8],[0.7,0.1,0.3,0.8,0,0.8,0,0,0,0.5],[0.6,0,0.1,0.9,0,0.9,0.1,0.1,0,0.4],[0.5,0.1,0.2,1,0,1,0.2,0,0,0.1],[0.7,0,0.3,0.8,0,1,0.2,0.1,0,0.1],
       [0.9,0.1,0,0.1,0,0.2,0.8,0,0,1],[0.8,0.1,0,0,0,0,0.9,0,0,1],[0.3,0.1,0,0.1,0,0.1,0.7,0,0,1],[0.8,0.1,0,0,0,0,0.8,0,0,0.8],[1,0.1,0,0,0,0.1,0.8,0,0,0.9],
       [0.1,0,0,0.1,0,0.2,0.2,0,0,0.9],[0.3,0,0,0,0,0.1,0.3,0,0,1],[0.8,0,0,0,0,0,0.8,0,0,1],[0.9,0,0,0.1,0,0.2,0.9,0,0,1],[0.1,0,0,0,0,0,0.4,0,0,1],
       [0.7,0.3,0.1,0.5,0.3,0.2,0.5,0,0,0.2],[0.6,0.1,0,0.3,0.2,0.6,0.4,0.3,0.2,0.1],[0.5,0.2,0,0.2,0.2,0.5,0.3,0.2,0.1,0.3],[0.6,0.3,0,0.3,0.3,0.6,0.2,0.1,0,0.2],[0.5,0.4,0,0.4,0.2,0.4,0.3,0.2,0,0.3],
       [1,0.2,0,0.2,0.1,0.3,0.2,0.3,0,0.3],[0.5,0.2,0,0.4,0.2,0.2,0.4,0.3,0.3,0.2],[0.7,0.3,0,0.3,0.4,0.8,0.3,0.2,0.2,0.2],[0.6,0.1,0,0.2,0.3,0.5,0.4,0.3,0,0.4],[0.6,0.2,0,0.6,0.4,0.5,0.3,0.1,0,0.3]
       ]

    types=['glass','glass','glass','glass','glass','glass','glass','glass','glass','glass',
       'plastic','plastic','plastic','plastic','plastic','plastic','plastic','plastic','plastic','plastic',
       'paper','paper','paper','paper','paper','paper','paper','paper','paper','paper',
       'organic','organic','organic','organic','organic','organic','organic','organic','organic','organic',
       'metal','metal','metal','metal','metal','metal','metal','metal','metal','metal',
       'mixed','mixed','mixed','mixed','mixed','mixed','mixed','mixed','mixed','mixed',
       ]

    #[color,elastic,fragile,smell,containsInk,dirty,shiny,rustling,transparency,weight]
    #[kolor,elastycznosc,kruchosc,zapach,zawieraTusz,brudny,blyszczacy,szeleszczÄ…cy,przezroczystosc,waga

    cfl = tree.DecisionTreeClassifier()
    cfl = cfl.fit(properties,types)
    prediction = cfl.predict(tab)
    return prediction


